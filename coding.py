# 编码知识
# ASCII编码 由于计算机是美国人发明的 最早只有127个字符被编码到计算机里 (大小写英文字母 数字 符号)
# GB2312编码 处理中文显然一个字节是不够的，至少需要2个字节，还不能和ASCII编码冲突，所以中国制订了GB2312编码
# 你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码。
# UNICODE诞生 UNICODE把所有语言都统一到一套编码里，这样就不会再有乱码问题了

# UNICODE的标准也在不断发展，但最常用的是两个字节表示一个字符（如果要用到非常偏僻的字符，就需要4个字节）
# 现在，捋一捋ASCII编码和Unicode编码的区别：ASCII编码是1个字节，而Unicode编码通常是2个字节。
# 字母A用ASCII编码是十进制的65，二进制的01000001；
# 字符0用ASCII编码是十进制的48，二进制的00110000，注意字符'0'和整数0是不同的；
# 汉字中已经超出了ASCII编码的范围，用Unicode编码是十进制的20013，二进制的01001110 00101101。

# 你可以猜测，如果把ASCII编码的A用Unicode编码，只需要在前面补0就可以，因此，A的Unicode编码是00000000 01000001。

# 新的问题又出现了：如果统一成Unicode编码，乱码问题从此消失了。但是，如果你写的文本基本上全部是英文的话，用Unicode编码比ASCII编码需要多一倍的存储空间，在存储和传输上就十分不划算。
# 所以，本着节约的精神，又出现了把Unicode编码转化为“可变长编码”的UTF-8编码。
# UTF-8编码把一个Unicode字符根据不同的数字大小编码成1-6个字节，常用的英文字母被编码成1个字节，汉字通常是3个字节，只有很生僻的字符才会被编码成4-6个字节。
# 如果你要传输的文本包含大量英文字符，用UTF-8编码就能节省空间：

# 搞清楚了ASCII、Unicode和UTF-8的关系，我们就可以总结一下现在计算机系统通用的字符编码工作方式：
# 在计算机内存中，统一使用Unicode编码，当需要保存到硬盘或者需要传输的时候，就转换为UTF-8编码。
# 用记事本编辑的时候，从文件读取的UTF-8字符被转换为Unicode字符到内存里，编辑完成后，保存的时候再把Unicode转换为UTF-8保存到文件：

# python3字符串是用unicode编码的，Python的字符串支持多语言

# 对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符：
print(ord('A'))
print(ord('中'))
print(chr(65))

# 字符的整数编码
print('\u4e2d\u6587')

# 解码
# b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore')


# 计算字符数
print(len('1'))
print(len('中国'))
# len()函数计算的是str的字符数，如果换成bytes，len()函数就计算字节数：

# 1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。
print(len('中文'.encode('utf-8')))

# 告诉编译器读取源代码的编码信息
# -*- coding: utf-8 -*-

# 告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释
# !/usr/bin/env python3

# 字符串格式化
print('Hello,%s' % 'world')
# 百分号是一个普通字符怎么办
print('%d%%' % 7)

# format
print('Hello,{0},成绩提升了{1:.1f}%'.format('哈哈', 12.5))

# 当str和bytes互相转换时，需要指定编码。最常用的编码是UTF-8。Python当然也支持其他编码方式，比如把Unicode编码成GB2312：
